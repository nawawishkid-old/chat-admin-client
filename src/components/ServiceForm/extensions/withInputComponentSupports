import React from "react";

const withGenderInput = Component => {
  return class extends React.Component {
    modifyInputComponents = () => {
      return this.props.inputs.map((input, index) => {
        console.log(input);
        const props = {
          onKeyPress: this.getInputOnKeyPressListener(input),
          onChange: this.getInputOnChangeListener(input)
        };
        const newInput = this.modifySubComponent(input, props);

        this.setInitialParams(newInput.props.name, newInput.props.defaultValue);

        return newInput;
      });
    };

    /**
     * @param {*} maybeValue 'Maybe' because it may be a DOM value or an SyntheticEvent object which will be given by Ant Design Component (-_-')
     */
    getInputOnChangeListener = input => {
      return maybeValue => {
        const value = this.evaluateAntDesignListenerParameter(maybeValue);

        if (typeof input.props.onChange === "function") {
          input.props.onChange(value);
        }

        this.updateParams(input.props.name, value);
      };
    };

    getInputOnKeyPressListener = input => {
      return event => {
        const value = this.evaluateAntDesignListenerParameter(event);
        const currentKeys = key.getPressedKeyCodes();

        if (typeof input.props.onKeyPress === "function") {
          input.props.onKeyPress(value);
        }

        console.log(currentKeys);

        if (currentKeys[0] === 16 && currentKeys[1] === 13) {
          this.copyOutputText();
        } else if (currentKeys[0] === 13) {
          this.handleClick(event);
        }
      };
    };

    /**
     * Evaluate whether it is DOM value or React SyntheticEvent
     */
    evaluateAntDesignListenerParameter = maybeValue => {
      let value;

      if (typeof maybeValue === "object") {
        value =
          maybeValue.constructor.name === "SyntheticEvent"
            ? maybeValue.target.value
            : maybeValue;
      } else {
        value = maybeValue;
      }

      return value;
    };

    setInitialParams = (key, value) => {
      // No problems here, we call this method on instantiation
      this.state.params[key] = value;
    };

    updateParams = (key, value) => {
      const { params } = this.state;

      params[key] = value;

      this.setState({ params: params });
    };

    render() {
      return <Component {...this.props} />;
    }
  };
};

export default withGenderInput;
